Desarrollar una plataforma web empresarial moderna y funcional, enfocada en organizaci√≥n interna, gesti√≥n de tareas, casos y rendimiento del personal.
Debe estar construida con React + TypeScript + TailwindCSS + shadcn/ui, aplicando Clean Architecture y principios SOLID.

üß© ESTRUCTURA Y PATRONES A RESPETAR

C√≥digo limpio y modular:

Dividir componentes seg√∫n responsabilidad √∫nica (SRP).

Evitar l√≥gica repetida; usar hooks y helpers reutilizables.

Usar nombres descriptivos (UserCard, TaskList, useThemeStore, etc.).

Separar capas (UI, l√≥gica, estado, servicios).

Evitar comentarios innecesarios; solo los que aclaren l√≥gica compleja.

Arquitectura sugerida:

src/
‚îú‚îÄ‚îÄ components/
‚îú‚îÄ‚îÄ features/
‚îú‚îÄ‚îÄ hooks/
‚îú‚îÄ‚îÄ lib/
‚îú‚îÄ‚îÄ pages/
‚îú‚îÄ‚îÄ store/
‚îú‚îÄ‚îÄ styles/
‚îú‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ App.tsx


Gesti√≥n de estado: usar Zustand (simple, limpio y eficiente).

Estilo visual: usar TailwindCSS + componentes shadcn/ui.

Dise√±o: moderno, minimalista, con sombras suaves, bordes redondeados (rounded-2xl), fuentes claras (font-semibold, text-gray-800), y colores de acento con gradientes (from-yellow-400 to-yellow-600 o from-blue-500 to-indigo-600).

üé® LINEAMIENTOS DE DISE√ëO

Tema oscuro y claro funcional, con persistencia en localStorage.

Gradientes visibles, suaves y modernos.

Layout con sidebar fija y topbar con opciones (tema, perfil, notificaciones).

Uso correcto de √≠conos de Lucide React (Settings, Sun, Moon, Bell, UserCircle, etc.).

Cards con shadow-md o shadow-lg, rounded-2xl, p-4 o p-6.

Interfaz limpia tipo panel administrativo moderno (dashboard).

‚öôÔ∏è FUNCIONALIDADES EXISTENTES (ya implementadas)

El proyecto ya cuenta con:

Sistema de usuarios con roles (admin, miembro, invitado).

Tablero Kanban funcional con tareas y drag & drop.

Gesti√≥n de proyectos m√∫ltiples.

Sistema de puntos, logros y recompensas.

Dashboard con estad√≠sticas.

M√≥dulo de capacitaciones.

Chat interno y notificaciones.

Modo oscuro (roto actualmente).

Calendario para tareas.

Roles con permisos.

Ranking y gamificaci√≥n.

üîß TAREAS PRINCIPALES A EJECUTAR (PRIORIDAD ALTA ‚Üí BAJA)
1Ô∏è‚É£ REPARAR MODO OSCURO/CLARO

Hacer que el tema se guarde en localStorage.

Usar un store global (ej. useThemeStore con Zustand).

Aplicar clases dark: de Tailwind din√°micamente.

Mantener el modo seleccionado tras recargar la p√°gina.

Agregar un bot√≥n toggle en el header con √≠conos Sun / Moon.

2Ô∏è‚É£ SISTEMA DE CASOS / ATENCI√ìN AL CLIENTE (nuevo m√≥dulo)

CRUD completo de casos o reclamos con estos campos:

ID, cliente, descripci√≥n, estado, prioridad, responsable, notas internas.

Filtros por estado (abierto, en curso, cerrado).

Asignaci√≥n de responsable.

Historial de actualizaciones por caso.

Dashboard de m√©tricas (tiempo promedio de resoluci√≥n, cantidad por mes, satisfacci√≥n).

Interfaz tipo card grid o tabla con buscador y filtros.

3Ô∏è‚É£ DASHBOARD DE M√âTRICAS

Panel visual con:

Tareas completadas / pendientes.

Casos resueltos / abiertos.

Usuarios activos.

Gr√°ficos con recharts o chart.js.

Dise√±o tipo cards estad√≠sticas (bg-gradient-to-r, √≠conos, n√∫meros grandes).

4Ô∏è‚É£ CHAT INTERNO MEJORADO

Integrar posibilidad de mencionar usuarios (@usuario).

Permitir env√≠o de archivos (solo frontend simulado).

Mantener los mensajes en localStorage por ahora.

Mostrar mensajes en burbujas con timestamps.

5Ô∏è‚É£ BASE DE DATOS (opcional para fase siguiente)

Implementar persistencia con Supabase o MongoDB (Prisma).

Guardar usuarios, tareas, casos, mensajes y configuraciones.

Estructurar servicios en src/lib/api/.

6Ô∏è‚É£ DETALLES VISUALES Y UX

Agregar animaciones suaves con Framer Motion.

Hover states (hover:scale-105, hover:shadow-lg).

Botones con colores de gradiente y transiciones (transition-all duration-200).

Textos con gradiente tipo:

<h1 className="text-3xl font-extrabold bg-clip-text text-transparent bg-gradient-to-r from-yellow-400 to-yellow-600">
  Coaching
</h1>

üì¶ COMPONENTES CLAVE A TENER EN EL PROYECTO

<Sidebar /> ‚Üí navegaci√≥n principal (Dashboard, Proyectos, Casos, Usuarios, Configuraci√≥n).

<Header /> ‚Üí t√≠tulo, b√∫squeda, notificaciones, selector de tema, perfil.

<KanbanBoard /> ‚Üí tablero de tareas.

<CasesBoard /> ‚Üí m√≥dulo de casos.

<StatsDashboard /> ‚Üí panel de m√©tricas.

<ChatPanel /> ‚Üí chat interno.

<ThemeToggle /> ‚Üí switch de modo oscuro/claro.

<AppLayout /> ‚Üí layout general (sidebar + contenido central).

üß± NORMAS DE DESARROLLO

Cada componente debe estar en su propia carpeta con su estilo y l√≥gica (/features/<modulo>).

Los hooks globales van en /hooks.

El estado global (Zustand) en /store.

Los helpers y formateadores (formatDate, calculatePoints, etc.) en /utils.

Ning√∫n componente debe tener l√≥gica de negocio pesada.

Usar tipos TypeScript para todas las entidades (User, Task, Case, Project).

üîç ESTILO DE RESPUESTA ESPERADO DE REPLIT

Cuando genere c√≥digo:

Debe devolver el archivo completo (no fragmentos sueltos).

Debe mantener la coherencia con el dise√±o general (dashboard moderno).

Debe explicar brevemente el enfoque (2‚Äì3 l√≠neas m√°ximo).

No debe usar librer√≠as innecesarias.

Siempre aplicar Clean Code y coherencia visual.

ü™Ñ PRIMERA ACCI√ìN A REALIZAR

Implementar y dejar funcional el modo oscuro/claro persistente con Tailwind, Zustand y localStorage.
Luego continuar con el m√≥dulo de casos (CRM interno).